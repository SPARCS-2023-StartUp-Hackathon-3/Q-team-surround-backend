// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  email String @db.VarChar(50) @unique
  nickname String @db.VarChar(12)
  password String? @db.Text
  provider Provider
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Album Album[] @relation("USER_ALBUM")
  Song Song[] @relation("USER_SONG")
  Userinfo UserInfo? @relation("USER_INFO")
  Playlist Playlist[] @relation("USER_PLAYLIST")
  History History[] @relation("USER_HISTORY")
  LikedSong Song[] @relation("USER_LIKE_SONG")
  Feed Feed[] @relation("USER_FEED")
  Follower Follow[] @relation("USER_FOLLOWER")
  Following Follow[] @relation("USER_FOLLOWING")
}

model Follow {
  followerId Int
  followingId Int

  Follower User @relation("USER_FOLLOWING", fields: [followerId], references: [id])
  Following User @relation("USER_FOLLOWER", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}

model UserInfo {
  userType UserType @default(value: LISTENER) @map("user_type")
  phoneNumber String? @db.VarChar(11) @map("phone_number")
  imageUrl String? @db.Text @map("image_url")
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserId Int @map("user_id")

  User User @relation("USER_INFO", fields: [UserId], references: [id])

  @@id([UserId])
  @@map("user_info")
}

enum Provider {
  LOCAL
  KAKAO
}

enum UserType {
  LISTENER
  SINGER
  ADMIN
}

model Album {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(50)
  description String? @db.Text
  kind AlbumKind
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Song Song[] @relation("ALBUM_SONG")
  UserId Int @map("user_id")

  User User @relation("USER_ALBUM", fields: [UserId], references: [id])
}

enum AlbumKind {
  SINGLE
  EP
  ALBUM
}

model Song {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(50)
  description String? @db.Text
  genre Genre
  lyrics String? @db.Text
  fileUrl String @db.Text @map("file_url")
  coverImageUrl String @db.Text @map("cover_image_url")
  likes Int @db.Integer @default(0)
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  UserId Int @map("user_id")
  AlbumId Int? @map("album_id")
  FeedId Int?
  Playlist Playlist[] @relation("SONG_PLAYLIST")
  History History[] @relation("SONG_HISTORY")
  Liker User[] @relation("USER_LIKE_SONG")

  User User @relation("USER_SONG", fields: [UserId], references: [id])
  Feed Feed? @relation("FEED_SONG", fields: [FeedId], references: [id])
  Album Album? @relation("ALBUM_SONG", fields: [AlbumId], references: [id])
}

enum Genre {
  BALLAD
  HIPHOP
  CLASSIC
  RNB
  POP
  INDIE
  ROCK
}

model Playlist {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(20)
  isPublic Boolean @db.Boolean @default(false)

  UserId Int @map("user_id")
  // SongId Int @map("song_id")
  
  User User @relation("USER_PLAYLIST", fields: [UserId], references: [id])
  Song Song[] @relation("SONG_PLAYLIST")
}

model History {
  id Int @default(autoincrement()) @id
  
  UserId Int @map("user_id")
  SongId Int @map("song_id")

  User User @relation("USER_HISTORY", fields: [UserId], references: [id])
  Song Song @relation("SONG_HISTORY", fields: [SongId], references: [id])
}

model Feed {
  id Int @default(autoincrement()) @id
  content String @db.Text

  UserId Int
  Song Song[] @relation("FEED_SONG")

  User User? @relation("USER_FEED", fields: [UserId], references: [id])
}