// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id Int @default(autoincrement()) @id
  email String @db.VarChar(50) @unique
  password String? @db.Text
  nickname String @db.VarChar(12)
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Album album[] @relation("USER_ALBUM")
  Song song[] @relation("USER_SONG")
  Userinfo userInfo? @relation("USER_INFO")
  Playlist playlist[] @relation("USER_PLAYLIST")
  History history[] @relation("USER_HISTORY")
}

model userInfo {
  provider Provider
  userType UserType @default(value: LISTENER) @map("user_type")
  phoneNumber String? @db.VarChar(11) @map("phone_number")
  imageUrl String? @db.Text @map("image_url")
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserId Int @map("user_id")

  User user @relation("USER_INFO", fields: [UserId], references: [id])

  @@id([UserId])
  @@map("user_info")
}

enum Provider {
  LOCAL
  KAKAO
}

enum UserType {
  LISTENER
  SINGER
  ADMIN
}

model album {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(50)
  description String? @db.Text
  kind AlbumKind
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Song song[] @relation("ALBUM_SONG")
  UserId Int @map("user_id")

  User user @relation("USER_ALBUM", fields: [UserId], references: [id])
}

enum AlbumKind {
  SINGLE
  EP
  ALBUM
}

model song {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(50)
  description String? @db.Text
  genre Genre
  lyrics String? @db.Text
  views Int @db.Integer @default(0)
  createdAt DateTime @db.Timestamptz() @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  UserId Int @map("user_id")
  AlbumId Int @map("album_id")
  Playlist playlist[] @relation("SONG_PLAYLIST")
  History history[] @relation("SONG_HISTORY")

  User user @relation("USER_SONG", fields: [UserId], references: [id])
  Album album @relation("ALBUM_SONG", fields: [AlbumId], references: [id])
}

enum Genre {
  BALLAD
  HIPHOP
  CLASSIC
  RNB
  POP
  INDIE
  ROCK
}

model playlist {
  id Int @default(autoincrement()) @id
  title String @db.VarChar(20)
  isPublic Boolean @db.Boolean @default(false)

  UserId Int @map("user_id")
  SongId Int @map("song_id")
  
  User user @relation("USER_PLAYLIST", fields: [UserId], references: [id])
  Song song? @relation("SONG_PLAYLIST", fields: [SongId], references: [id])
}

model history {
  id Int @default(autoincrement()) @id
  
  UserId Int @map("user_id")
  SongId Int @map("song_id")

  User user @relation("USER_HISTORY", fields: [UserId], references: [id])
  Song song @relation("SONG_HISTORY", fields: [SongId], references: [id])
}